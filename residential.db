{:form (fn [sym] (fn [image] (get image sym))), :links {}, :id #uuid "81df67e2-01b7-45a7-a22d-a56da9ccd95e", :time #inst "2019-03-22T22:01:46.314-00:00"}
{:form (fn [form] (with-out-str (pprint form))), :links {}, :id #uuid "05abc4d9-9c43-4c69-bf43-48d91d714eb5", :time #inst "2019-03-22T22:02:06.716-00:00"}
{:form {:edit (fn [prev text] (try {:emit (read-string text)} (catch Exception e {:unreadable text})))}, :links {}, :id #uuid "5c3d7b4d-b616-44d8-b6be-f877fd1711df", :time #inst "2019-03-22T22:03:04.482-00:00"}
{:form (fn [ev] (:text ev)), :links {}, :id #uuid "a179a2af-0243-4f47-96fc-3cc2199ec05e", :time #inst "2019-03-22T22:03:26.132-00:00"}
{:form (fn [image syms] (into {} (map (fn [s] (let [ref (get-in image [(namespace s) (name s)])] [(:ns/symbol ref) (invoke-by-id (:id ref))]))) syms)), :links {}, :id #uuid "6b0fc0a5-ea99-41b0-b4e2-884f7abe0433", :time #inst "2019-03-22T22:03:55.262-00:00"}
{:form (fn [image] (fn-map image [:core/display :core/format-code-text :core/edits :core/form])), :links {fn-map #uuid "6b0fc0a5-ea99-41b0-b4e2-884f7abe0433"}, :id #uuid "c6ac1861-bd41-41e4-980e-8fd03e334113", :time #inst "2019-03-22T22:04:37.093-00:00"}
{:form {:image (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}, :id #uuid "5854b093-746e-4d0f-a4c5-84f715354b57", :time #inst "2019-03-22T22:04:54.534-00:00"}
{:form (fn [{{:keys [display format-code-text edits form]} :image, watch :watch}] (let [stage (create-code-stage watch) key-strokes (-> stage :event-streams :key-stroke) text-obj (-> stage :node) code-display (display watch) text-render (text-renderer text-obj) code-change (source-effector watch)] {:nodes #:ed{:code-1 (process (map code-display)), :code-2 (process (map format-code-text)), :edits (process (map edits)), :form (make-node form), :key-strokes key-strokes, :text-render (effector text-render), :code-change (effector code-change)}, :wires #{[:ed/form :ed/code-change] [:ed/code-1 :ed/code-2] [:ed/key-strokes :ed/edits] [:ubik.topology/image :ed/code-1] [:ed/code-2 :ed/text-render] [{:edit :ed/edits} :ed/form]}})), :links {}, :id #uuid "0c888a87-4072-4a57-818f-1844d13cfd91", :time #inst "2019-03-22T22:14:13.007-00:00"}
{:form {:nodes #:mt{:input (signal), :sub-image (process (map extract-deps)), :combined (make-node edit-multi), :topo (process (map topo-fac)), :out (effector topo-effector)}, :wires #{[{:image :mt/sub-image, :watch :ubik.codeless/input} :mt/combined] [:mt/topo :mt/out] [:mt/combined :mt/topo] [:ubik.topology/image :mt/sub-image]}}, :links {edit-multi #uuid "5854b093-746e-4d0f-a4c5-84f715354b57", extract-deps #uuid "c6ac1861-bd41-41e4-980e-8fd03e334113", topo-fac #uuid "0c888a87-4072-4a57-818f-1844d13cfd91"}, :id #uuid "e2a3ec9d-a690-41c9-8ac8-1ad70f6d264a", :time #inst "2019-03-22T22:15:02.300-00:00"}
{:form {:nodes [(signal :mt/input) (process :mt/sub-image (map extract-deps)) (make-node :mt/combined edit-multi) (process :mt/topo (map topo-fac)) (effector :mt/out topo-effector)], :wires #{[{:image :mt/sub-image, :watch :ubik.codeless/input} :mt/combined] [:mt/topo :mt/out] [:mt/combined :mt/topo] [:ubik.topology/image :mt/sub-image]}}, :links {edit-multi #uuid "5854b093-746e-4d0f-a4c5-84f715354b57", extract-deps #uuid "c6ac1861-bd41-41e4-980e-8fd03e334113", topo-fac #uuid "0c888a87-4072-4a57-818f-1844d13cfd91"}, :id #uuid "65817d55-eac2-4570-9ea6-b89840810bb8", :time #inst "2019-03-22T22:35:16.743-00:00"}
{:form (fn [{{:keys [display format-code-text edits form]} :image, watch :watch}] (let [stage (create-code-stage watch) key-strokes (-> stage :event-streams :key-stroke) text-obj (-> stage :node) code-display (display watch) text-render (text-renderer text-obj) code-change (source-effector watch)] {:nodes [(process :ed/code-1 (map code-display)) (process :ed/code-2 (map format-code-text)) (process :ed/edits (map edits)) (make-node :ed/form form) key-strokes (effector :ed/text-render text-render) (effector :ed/code-change code-change)], :wires #{[:ed/form :ed/code-change] [:ed/code-1 :ed/code-2] [:ed/key-strokes :ed/edits] [:ubik.topology/image :ed/code-1] [:ed/code-2 :ed/text-render] [{:edit :ed/edits} :ed/form]}})), :links {}, :id #uuid "2fb13a14-bf6f-496e-8ef3-1de092209840", :time #inst "2019-03-22T22:40:03.648-00:00"}
{:form {:nodes [(signal :mt/input) (process :mt/sub-image (map extract-deps)) (make-node :mt/combined edit-multi) (process :mt/topo (map topo-fac)) (effector :mt/out topo-effector)], :wires #{[{:image :mt/sub-image, :watch :ubik.codeless/input} :mt/combined] [:mt/topo :mt/out] [:mt/combined :mt/topo] [:ubik.topology/image :mt/sub-image]}}, :links {edit-multi #uuid "5854b093-746e-4d0f-a4c5-84f715354b57", extract-deps #uuid "c6ac1861-bd41-41e4-980e-8fd03e334113", topo-fac #uuid "2fb13a14-bf6f-496e-8ef3-1de092209840"}, :id #uuid "2a700163-c1d8-48d4-bee0-7e0d36fc230f", :time #inst "2019-03-22T22:40:20.961-00:00"}
