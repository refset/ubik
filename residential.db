{:time #inst "2019-04-01T16:52:28.078-00:00", :sha1 "3fc939a454728b707ae89b57de8816656ccdad0e", :snippet {:form (fn [ev] (:text ev)), :links {}}}
{:time #inst "2019-04-01T16:52:28.082-00:00", :sha1 "1024163555ab6e30df014db5677b3260be708258", :snippet {:form {:edit (fn [prev text] (try {:emit (read-string text)} (catch Exception e {:unreadable text})))}, :links {}}}
{:time #inst "2019-04-01T16:52:28.085-00:00", :sha1 "ab2fca1200ce644ff4af607beaf3bba12e2d0518", :snippet {:form (fn [form] (with-out-str (pprint form))), :links {}}}
{:time #inst "2019-04-01T16:52:28.089-00:00", :sha1 "6a61ed710da21fd941d5eb6d45320fab2a3f58f4", :snippet {:form (fn [image sym] (get-in image [(namespace sym) (name sym)])), :links {}}}
{:time #inst "2019-04-01T16:52:28.093-00:00", :sha1 "93746ef4609f4fc411d5a1817a1c883a34a8acc1", :snippet {:form (fn [image sym] (let [ref (ns-ref image sym)] [(:name ref) (edit (:ref ref))])), :links {ns-ref "6a61ed710da21fd941d5eb6d45320fab2a3f58f4"}}}
{:time #inst "2019-04-01T16:52:28.097-00:00", :sha1 "f3a99435a53810114bf70ce8819736e886a864b6", :snippet {:form (fn [sym] (fn [image] (second (lookup image sym)))), :links {lookup "93746ef4609f4fc411d5a1817a1c883a34a8acc1"}}}
{:time #inst "2019-04-01T16:52:28.102-00:00", :sha1 "3491a57f0ae51b872951338afee12b9997b59299", :snippet {:form (fn [image sym] (let [ref (ns-ref image sym)] [(:name ref) (invoke-by-id (:ref ref))])), :links {ns-ref "6a61ed710da21fd941d5eb6d45320fab2a3f58f4"}}}
{:time #inst "2019-04-01T16:52:28.111-00:00", :sha1 "0196682bbf23534434ff7faa28dc8fcd5dda647d", :snippet {:form (fn [image syms] (into {} (map (partial ns-lookup image)) syms)), :links {ns-lookup "3491a57f0ae51b872951338afee12b9997b59299"}}}
{:time #inst "2019-04-01T16:52:28.119-00:00", :sha1 "025b15baa08167f779595adb931a87b17dafb80b", :snippet {:form (fn [image] (fn-map image [:core/display :core/format-code-text :core/edits :core/form])), :links {fn-map "0196682bbf23534434ff7faa28dc8fcd5dda647d"}}}
{:time #inst "2019-04-01T16:52:28.130-00:00", :sha1 "fe13fa46c99badc9743195996c99431f3a32a410", :snippet {:form {:image (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-01T16:52:28.137-00:00", :sha1 "8a769c97bafe9f367fe817678652537cbd2d5b64", :snippet {:form (fn [{{:keys [core/display core/format-code-text core/edits core/form]} :image, watch :watch}] (let [stage (create-code-stage watch) key-strokes (-> stage :event-streams :key-stroke) text-obj (-> stage :node) code-display (display watch) text-render (text-renderer text-obj) code-change (source-effector watch)] {:nodes [(process :ed/code-1 (map code-display)) (process :ed/code-2 (map format-code-text)) (process :ed/edits (map edits)) (make-node :ed/form form) key-strokes (effector :ed/text-render text-render) (effector :ed/code-change code-change)], :wires #{[:ed/form :ed/code-change] [:ed/code-1 :ed/code-2] [[:ubik.events/text-area watch :key-stroke] :ed/edits] [:ubik.topology/image :ed/code-1] [:ed/code-2 :ed/text-render] [{:edit :ed/edits} :ed/form]}})), :links {}}}
{:time #inst "2019-04-01T16:52:28.141-00:00", :sha1 "bd4453a841449bf5aa4bd2ef9577ecc5407cf033", :snippet {:form {:nodes [(signal :mt/input) (process :mt/sub-image (map extract-deps)) (make-node :mt/combined edit-multi) (process :mt/topo (map topo-fac)) (effector :mt/out topo-effector)], :wires #{[:mt/topo :mt/out] [:mt/combined :mt/topo] [:ubik.topology/image :mt/sub-image] [{:image :mt/sub-image, :watch :mt/input} :mt/combined]}}, :links {edit-multi "fe13fa46c99badc9743195996c99431f3a32a410", extract-deps "025b15baa08167f779595adb931a87b17dafb80b", topo-fac "8a769c97bafe9f367fe817678652537cbd2d5b64"}}}
{:time #inst "2019-04-01T16:53:04.001-00:00", :sha1 "0ac26c0c7a9e329de12ad885bcacb239c6975941", :snippet {:form {:imag (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-01T16:53:06.009-00:00", :sha1 "68c11644f3e2384b7cc44ca1caa27a7f973a35d2", :snippet {:form {:ima (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-01T16:53:06.203-00:00", :sha1 "3b69d05f19ff605b776f39c4bf0216587971c564", :snippet {:form {:im (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-01T16:53:08.220-00:00", :sha1 "8a4e918c8e0991c143c55c73865f2e9ceb71d616", :snippet {:form {:i (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-01T16:53:18.458-00:00", :sha1 "8cf833f7a5c45168251e508b7de3d972fc464c94", :snippet {:form {:image 3, :a (fn [{:keys [watch], :as state} image] (let [s' (assoc state :image image)] (if watch (assoc s' :emit s') s'))), :watch (fn [{:keys [image], :as state} watch] (let [s' (assoc state :watch watch)] (if image (assoc s' :emit s') s')))}, :links {}}}
{:time #inst "2019-04-02T02:51:38.699-00:00", :sha1 "357256d4b475bafcdf905f7164d6ec98f75c50eb", :snippet {:form (fn [{:keys [nodes wires]}] (falloleen/translate (let [c (assoc (falloleen/circle :radius 10))] (mapv (fn* [p1__28777#] (falloleen/translate c [p1__28777# 0])) (map (fn* [p1__28778#] (* p1__28778# 30)) (range (count nodes))))) [0 200])), :links {}}}
{:time #inst "2019-04-02T02:51:38.712-00:00", :sha1 "0d6ddf89979af1f6ccce3601f1dc83159db0b5fe", :snippet {:form {:nodes [(process :ubik.codeless/tv (map tv))], :wires [[:ubik.topology/topology :ubik.codeless/tv] [:ubik.codeless/tv :ubik.topology/screen]]}, :links {tv "357256d4b475bafcdf905f7164d6ec98f75c50eb"}}}
{:time #inst "2019-04-02T02:53:25.398-00:00", :sha1 "52363b10d36c4645e14f6d4348f1f1f21ef9d00b", :snippet {:form (fn [{:keys [nodes wires]}] (falloleen/translate (let [c (assoc (falloleen/circle :radius 10))] (mapv (fn* [p1__31929#] (falloleen/translate c [p1__31929# 0])) (map (fn* [p1__31930#] (* p1__31930# 30)) (range (count nodes))))) [0 200])), :links {}}}
{:time #inst "2019-04-02T03:09:30.690-00:00", :sha1 "3e5e9d4456f30f8266f64041026ceafb760b4101", :snippet {:form (fn [{:keys [nodes wires]}] (falloleen/translate (let [c (assoc (falloleen/circle :radius 10))] (mapv (fn* [p1__32141#] (falloleen/translate c [p1__32141# 0])) (map (fn* [p1__32142#] (* p1__32142# 30)) (range (count nodes))))) [0 200])), :links {}}}
{:time #inst "2019-04-06T16:34:23.982-00:00", :sha1 "dd079d3ec7cdb463da589e781db3c866017fe40d", :snippet {:form (fn [{:keys [nodes wires]}] (falloleen/translate (let [c (assoc (falloleen/circle :radius 10))] (mapv (fn* [p1__32249#] (falloleen/translate c [p1__32249# 0])) (map (fn* [p1__32250#] (* p1__32250# 30)) (range (count nodes))))) [0 200])), :links {}}}
{:time #inst "2019-04-06T16:34:24.022-00:00", :sha1 "effe26babf5f2e8efa0a4625996999a48704edaa", :snippet {:form (-> f/circle (assoc :radius 40) (f/style {:opacity 0.4, :fill :pink})), :links {}}}
{:time #inst "2019-04-06T16:37:11.614-00:00", :sha1 "7466b5afe3fed48bc5fe0bbeaceecbcf13ab3af2", :snippet {:form (fn [{:keys [nodes wires]}] (falloleen/translate (let [c (assoc (falloleen/circle :radius 10))] (mapv (fn* [p1__32299#] (falloleen/translate c [p1__32299# 0])) (map (fn* [p1__32300#] (* p1__32300# 30)) (range (count nodes))))) [0 200])), :links {}}}
