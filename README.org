#+TITLE: lemonade

Experiment in higher order visual programming.

* Overview
	This is both a library for doing vector graphics in a data driven idiomatic
	clojure fashion and a framework for making interactive graphics / animations /
	UIs using that library.

	These two parts will likely be separated at a future date, but since the is
	mostly an experiment at present, it's far more convenient to keep them
	together.

* Breakdown
	The core graphics primitives are in =lemonade.core=.

	Renderers are in =lemonade.renderers.*=. There are currently only 2, an HTML
	Canvas 2d rendering context renderer for the browser and a quil renderer for
	JVM Clojure.

	Demo setups of the two renderers are in =lemonade.demos.*=, and examples that
	*should* work in either are in =lemonade.examples.*=

* Getting Started
** Install
	 To get an interactive development environment run:

	 lein figwheel

	 and open your browser at [localhost:3449](http://localhost:3449/).  This will
	 auto compile and send all changes to the browser without the need to
	 reload. After the compilation process is complete, you will get a Browser
	 Connected REPL. An easy way to try it is:

	 (js/alert "Am I connected?")

	 and you should see an alert in the browser window.

	 To clean all compiled files:

	 lein clean

	 To create a production build run:

	 lein do clean, cljsbuild once min

	 And open your browser in =resources/public/index.html=. You will not get live
	 reloading, nor a REPL.

** Play
	 There isn't any good way to switch between examples just yet. Look at
	 whatever function defines =lemonade.demos.canvas/base= and play with it, the
	 changes should update automatically.

* Development
** Ideal Demo
	 Something that really shows off the power of an infinite canvas with lazy
	 rendering, and the data model.

	 Ideally I could make what looks and acts like a normal webpage — with
	 hyperlinks that jump to different parts of the page — but where the user can
	 hit tab or something and switch into infinite canvas mode.

	 Lots of easter eggs.
** Actions needed
*** TODO Text
	 Render text lines and boxes. Selection/copy can wait.
*** TODO Second Implementation
		The Quil based JVM renderer is just a stub really. I need a second
		implementation to call me out anywhere I might be thinking in terms of
		canvas.
*** TODO Finish Elections Demo
		This has lots of little bits that are needed for polish
*** TODO Animations in event loop
		If the app state doesn't change then render won't be called. So interactive
		animations need to return a lazy seq of frames which will be poped off by
		the event loop event if the app state hasn't changed. Of course whatever
		makes this lazy-seq will need to be aware of game time.

		I don't know how to do this. Yet another experiment.
*** TODO Lazy rendering
*** TODO Direct bitmaps
		Some operations are too expensive for a vector representation. Some things
		(like the Mandlebrot set) are defined pixelwise, and I don't know that
		trying to redefine them would be productive.

		So, play around and try to find idioms that are productive and fit.

*** TODO Physics
*** TODO Demo animation / game
		The line between the two can be very blurry if we think of physics as
		strictly Newtonian. Without input from the user, the "game" is an animation
		since the physics are all deterministic.

		This might be a terrible way to make games, but it might also work. Fun test.

*** TODO Render caching
		The renderer is reasonably fast, but will choke on complicated things.
*** TODO Draw a map from GIS data
		Elections Canada released an enourmous KML file containing the boundaries of
		every polling station of every riding in the country. That could make a very
		detailed map. Can I render that on the fly? Think of it as a stress test.
*** TODO Proceedural Drawing
		This is a big one, but too hard to insist that it be required.

		I'd like to come up with a way to create a declarative spec of a proceedural
		drawing that the runtime can compile with perlin noise into a lemonade
		shape.

		That can be done offline and the shapes can be hotloaded in the client if
		need be.

		How does one declaratively specify a proceedural drawing?!?

** References
	 - [[https://www.html5rocks.com/en/tutorials/canvas/performance/][Canvas performance techniques]]
		 If optimisation becomes necessary

* License

	Copyright © 2017 Thomas Getgood

	Distributed under the Eclipse Public License either version 1.0 or (at your
	option) any later version.
